version: '3.9'

services:
  dnsmasq:
    image: jpillora/dnsmasq
    container_name: dnsmasq
    volumes:
      - ./dnsmasq/dnsmasq.conf:/etc/dnsmasq.d/custom.conf
    ports:
      - "53:53/udp"
    networks:
      pg-network:
        ipv4_address: 172.30.0.11
    cap_add:
      - NET_ADMIN

  etcd:
    image: quay.io/coreos/etcd:v3.4.13
    container_name: etcd
    environment:
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_NAME=etcd1
    ports:
      - "2379:2379"
    networks:
      - pg-network

  monitor:
    image: citusdata/pg_auto_failover:demo
    container_name: pg-monitor
    environment:
      PGDATA: /tmp/pgaf
      PG_AUTOCTL_DEBUG: 1
    command: pg_autoctl create monitor --ssl-self-signed --auth trust --run
    depends_on:
      - etcd
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "autoctl_node", "-d", "pg_auto_failover"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - pg-network

  postgres-master:
    image: citusdata/pg_auto_failover:demo
    container_name: postgres-master
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      PGDATA: /tmp/pgaf
      PGUSER: admin
      PGDATABASE: app_db
      PG_AUTOCTL_MONITOR: "postgresql://autoctl_node@monitor/pg_auto_failover"
    command: pg_autoctl create postgres --ssl-self-signed --auth trust --pg-hba-lan --run
    depends_on:
      monitor:
        condition: service_healthy
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin", "-d", "app_db"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - pg-network

  postgres-slave1:
    image: citusdata/pg_auto_failover:demo
    container_name: postgres-slave1
    environment:
      PGDATA: /tmp/pgaf
      PGUSER: admin
      PGDATABASE: app_db
      PG_AUTOCTL_MONITOR: "postgresql://autoctl_node@monitor/pg_auto_failover"
    command: pg_autoctl create postgres --ssl-self-signed --auth trust --pg-hba-lan --run
    depends_on:
      postgres-master:
        condition: service_healthy
    ports:
      - "5433:5432"
    networks:
      - pg-network

  postgres-slave2:
    image: citusdata/pg_auto_failover:demo
    container_name: postgres-slave2
    environment:
      PGDATA: /tmp/pgaf
      PGUSER: admin
      PGDATABASE: app_db
      PG_AUTOCTL_MONITOR: "postgresql://autoctl_node@monitor/pg_auto_failover"
    command: pg_autoctl create postgres --ssl-self-signed --auth trust --pg-hba-lan --run
    depends_on:
      postgres-master:
        condition: service_healthy
    ports:
      - "5434:5432"
    networks:
      - pg-network

  rabbitmq1:
    image: rabbitmq:3-management
    hostname: rabbitmq1
    container_name: rabbitmq1
    environment:
      RABBITMQ_ERLANG_COOKIE: supersecretcookie
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - pg-network

  rabbitmq2:
    image: rabbitmq:3-management
    hostname: rabbitmq2
    container_name: rabbitmq2
    environment:
      RABBITMQ_ERLANG_COOKIE: supersecretcookie
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    depends_on:
      - rabbitmq1
    command: >
      sh -c "
        rabbitmq-server -detached &&
        sleep 10 &&
        rabbitmqctl stop_app &&
        rabbitmqctl join_cluster rabbit@rabbitmq1 &&
        rabbitmqctl start_app &&
        tail -f /dev/null"
    networks:
      - pg-network

  rabbitmq3:
    image: rabbitmq:3-management
    hostname: rabbitmq3
    container_name: rabbitmq3
    environment:
      RABBITMQ_ERLANG_COOKIE: supersecretcookie
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    depends_on:
      - rabbitmq1
    command: >
      sh -c "
        rabbitmq-server -detached &&
        sleep 10 &&
        rabbitmqctl stop_app &&
        rabbitmqctl join_cluster rabbit@rabbitmq1 &&
        rabbitmqctl start_app &&
        tail -f /dev/null"
    networks:
      - pg-network


  order-worker:
    build: ./backend/orders
    container_name: order-worker
    command: python worker.py
    depends_on:
      rabbitmq1:
        condition: service_healthy
    environment:
      DB_HOST: postgres-master
      DB_NAME: app_db
      DB_USER: admin
      DB_PASSWORD: ""
    networks:
      - pg-network

  orders1:
    build: ./backend/orders
    container_name: orders1
    environment:
      DB_HOST: postgres-master
      DB_NAME: app_db
      DB_USER: admin
      DB_PASSWORD: ""
    depends_on:
      postgres-master:
        condition: service_healthy
    ports:
      - "5001:5000"
    networks:
      pg-network:
        ipv4_address: 172.30.0.20

  orders2:
    build: ./backend/orders
    container_name: orders2
    environment:
      DB_HOST: postgres-master
      DB_NAME: app_db
      DB_USER: admin
      DB_PASSWORD: ""
    depends_on:
      postgres-master:
        condition: service_healthy
    ports:
      - "5002:5000"
    networks:
      pg-network:
        ipv4_address: 172.30.0.21

  users1:
    build: ./backend/users
    environment:
      DB_HOST: postgres-master
      DB_NAME: app_db
      DB_USER: admin
      DB_PASSWORD: ""
    depends_on:
      postgres-master:
        condition: service_healthy
      audit_service:
        condition: service_started
    ports:
      - "5003:5000"
    networks:
      - pg-network

  users2:
    build: ./backend/users
    environment:
      DB_HOST: postgres-master
      DB_NAME: app_db
      DB_USER: admin
      DB_PASSWORD: ""
    depends_on:
      postgres-master:
        condition: service_healthy
      audit_service:
        condition: service_started
    ports:
      - "5004:5000"
    networks:
      - pg-network

  products1:
    build: ./backend/products
    environment:
      DB_HOST: postgres-master
      DB_NAME: app_db
      DB_USER: admin
      DB_PASSWORD: ""
    depends_on:
      postgres-master:
        condition: service_healthy
    ports:
      - "5005:5000"
    networks:
      - pg-network

  products2:
    build: ./backend/products
    environment:
      DB_HOST: postgres-master
      DB_NAME: app_db
      DB_USER: admin
      DB_PASSWORD: ""
    depends_on:
      postgres-master:
        condition: service_healthy
    ports:
      - "5006:5000"
    networks:
      - pg-network

  frontend1:
    build: ./frontend
    ports:
      - "8081:80"
    networks:
      - pg-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - pg-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - pg-network

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://admin:@postgres-master:5432/app_db?sslmode=require"
    ports:
      - "9187:9187"
    networks:
      - pg-network

  pg-backup:
    image: postgres:16
    container_name: pg-backup
    depends_on:
      - postgres-master
    environment:
      PGPASSWORD: ""
    volumes:
      - ./pg_backup:/backups
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        while true; do
          echo "=== Backup start $(date) ==="
          pg_dump -h postgres-master -U admin app_db > /backups/backup_$(date +%Y%m%d_%H%M%S).sql
          echo "=== Backup done ==="
          sleep 3600
        done
    networks:
      - pg-network

  audit_service:
    build: ./backend/audit_service
    environment:
      DB_HOST: postgres-master
      DB_NAME: app_db
      DB_USER: admin
      DB_PASSWORD: ""
    depends_on:
      postgres-master:
        condition: service_healthy
    ports:
      - "5007:5000"
    networks:
      - pg-network


  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/cache:/var/cache/nginx
    depends_on:
      - frontend1
      - users1
      - users2
      - orders1
      - orders2
      - products1
      - products2
    networks:
      - pg-network
    dns:
      - 172.30.0.10
    extra_hosts:
      - "orders.local:172.30.0.20"
      - "orders.local:172.30.0.21"


  bot-runner1:
    build: ./bot-runner
    environment:
      - BASE_URL=http://nginx
      - BOT_SUFFIX=1
    depends_on:
      - nginx
    networks:
      - pg-network

  bot-runner2:
    build: ./bot-runner
    environment:
      - BASE_URL=http://nginx 
      - BOT_SUFFIX=2
    depends_on:
      - nginx
    networks:
      - pg-network

  bot-runner3:
    build: ./bot-runner
    environment:
      - BASE_URL=http://nginx
      - BOT_SUFFIX=3
    depends_on:
      - nginx
    networks:
      - pg-network


networks:
  pg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/24
